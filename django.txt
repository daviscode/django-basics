mkdir zoezi
cd zoezi/
mdir pos
mkdir pos
cd pos

sudo apt install  python3-venv
python3 -m venv venv

source venv/bin/activate 

pip install django
django-admin startproject core .
python3 manage.py startapp sales
pip freeze > requirement.txt
python3 manage.py startapp purchases

python3 manage.py makemigrations
python3 manage.py migrate  OR
python manage.py migrate


lsof -i :8000
kill -9 <PID>

python3 manage.py runserver 8080


python3 manage.py runserver

sudo nano /etc/postgresql/16/main/pg_hba.conf
sudo systemctl restart postgresql
pip install graphene-django
pip install psycopg2-binary

pip install -r requirements.txt

pip freeze > requirement.txt 



python3 manage.py createsuperuser


************************************************************************DATABASES****************************************************************

OneToOne  
from django.db import models

class Team(models.Model):
    name = models.CharField(max_length=100)
    logo = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name

class Coach(models.Model):
    name = models.CharField(max_length=100)
    team = models.OneToOneField(Team, on_delete=models.CASCADE, primary_key=True)

    def __str__(self):
        return self.name

OneToMany
from django.db import models

class Author(models.Model):
    name = models.CharField(max_length=100)
    bio = models.TextField(blank=True, null=True)
    birth_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return self.name

class Book(models.Model):
    title = models.CharField(max_length=200)
    publication_date = models.DateField()
    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='books')
    isbn = models.CharField(max_length=13, unique=True)

    def __str__(self):
        return self.title


ManyToMany
from django.db import models

class Course(models.Model):
    course_name = models.CharField(max_length=100)
    code = models.CharField(max_length=10, unique=True)

    def __str__(self):
        return self.course_name

class Student(models.Model):
    st_name = models.CharField(max_length=100)
    dob = models.DateField(null=True, blank=True)
    courses = models.ManyToManyField(Course, related_name='students')

    def __str__(self):
        return self.st_name

eg:
-- Create the Course table
CREATE TABLE Course (
    id SERIAL PRIMARY KEY,
    course_name VARCHAR(100) NOT NULL,
    code VARCHAR(10) NOT NULL UNIQUE
);

-- Create the Student table
CREATE TABLE Student (
    id SERIAL PRIMARY KEY,
    st_name VARCHAR(100) NOT NULL,
    dob DATE
);

-- Create the junction table for the many-to-many relationship
CREATE TABLE Course_Student (
    course_id INT NOT NULL,
    student_id INT NOT NULL,
    PRIMARY KEY (course_id, student_id),
    FOREIGN KEY (course_id) REFERENCES Course(id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES Student(id) ON DELETE CASCADE
);

====*********************************END-OF-DATABASES********************************====


**************************************************************************PLUGINS******************************************************************************
pip install graphene-django
pip install psycopg2-binary
pip show psycopg2
pip install django-redis
pip install channels channels_redis
pip install django-graphql-jwt
pip install django-filter
pip install django-elasticsearch-dsl
pip install "qrcode[pil]"
pip install pyzbar Pillow
pip install py4j
wget https://dl.min.io/server/minio/release/linux-amd64/minio
chmod +x minio
sudo mv minio /usr/local/bin/
sudo mkdir /data
sudo chmod -R 775 /data
sudo mkdir /data
sudo chmod -R 775 /data
minio dig in for more

pip install celery

$ pip install "celery[redis]"

$ pip install "celery[redis,auth,msgpack]"

pip install kombu

pip install --upgrade redis

pip list

 pip install --upgrade <package>
 pip install <package>==<version>

 pip install --upgrade pip







